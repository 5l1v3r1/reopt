* Initial research
** basic blocks
*** Functions
**** getElfArchInfo (Main)
     Takes an ELF object and returns an ArchitectureInfo object. Don't worry about
     the Some, that just replaces the architecture type parameter with the width of
     that same architecture (the ArchitectureInfo contained therein has all the
     needed information, and the particular architecture gets hidden).
**** elfClassInstances (Data.ElfEdit.Types)
     Takes an ElfClass w, an ElfWidthConstraints w => a, and satisfies the
     constraints, producing an a.
**** withArchConstraints
     A field of ArchitectureInfo, provides the architecture constraints to any
     computation that needs it.
**** mkFinalCFGWithSyms
     Create a discovery state and a symbol-address map from an ELF file, the
     corresponding memory object, ArchitectureInfo, and DiscoveryOptions.

* Implement first test
** Stub out separate HelloWorld test module
   with HelloWorld/ directory containing all the test executables and such.
** Factor out code in Main_reopt.hs that we need for test runs
   under Reopt.Interface
** Test should
   read in executable, create Elf and Memory objects for it, run mkFinalCFGWithSyms,
   basically do everything in the performReopt case for block discovery. Also, it
   should print out all the basic block information to a ".blocks" file.
* Complete tests
  ** Blocks (done), Functions (done), LLVM (done), object file, full reoptimization
* get rid of stderr output
* Make tests fail on any error
* Debug resulting failures
* Integrate with llvm-as to test LLVM output
* be able to perform analysis on .o files and integrate into test suite
